<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN"
        "http://mybatis.org/dtd/mybatis-3-mapper.dtd">
<mapper namespace="hello.itemservice.repository.mybatis.ItemMapper">

    <insert id="save" useGeneratedKeys="true" keyProperty="id">
        insert into item(item_name, price, quantity)
        values (#{itemName}, #{price}, #{quantity})
    </insert>
    <!--Insert SQL은 `<insert>` 를 사용하면 된다.
    `id` 에는 매퍼 인터페이스에 설정한 메서드 이름을 지정하면 된다. 여기서는 메서드 이름이 `save()` 이므로
    `save` 로 지정하면 된다.
    파라미터는 `#{}` 문법을 사용하면 된다. 그리고 매퍼에서 넘긴 객체의 프로퍼티 이름을 적어주면 된다.
    `#{}` 문법을 사용하면 `PreparedStatement` 를 사용한다. JDBC의 `?` 를 치환한다 생각하면 된다.
    `useGeneratedKeys` 는 데이터베이스가 키를 생성해 주는 `IDENTITY` 전략일 때 사용한다. `keyProperty`
    는 생성되는 키의 속성 이름을 지정한다. Insert가 끝나면 `item` 객체의 `id` 속성에 생성된 값이 입력된다.-->

    <update id="update">
        update item
        set item_name=#{updateParam.itemName},
        price = #{updateParam.price},
        quantity = #{updateParam.quantity}
        where id = #{id}
    </update>
    <!-- 여기서는 파라미터가 `Long id` , `ItemUpdateDto updateParam` 으로 2개이다. 파라미터가 1개만 있으면
    `@Param` 을 지정하지 않아도 되지만, 파라미터가 2개 이상이면 `@Param` 으로 이름을 지정해서 파라미터를 구분
    해야 한다.-->

    <select id="findById" resultType="Item">
        select id, item_name, price, quantity
        from item
        where id = #{id}
    </select>
    <!-- Select SQL은 `<select>` 를 사용하면 된다.
     `resultType` 은 반환 타입을 명시하면 된다. 여기서는 결과를 `Item` 객체에 매핑한다.
     앞서 `application.properties` 에 `mybatis.type-aliasespackage=
     hello.itemservice.domain` 속성을 지정한 덕분에 모든 패키지 명을 다 적지는 않아도
     된다. 그렇지 않으면 모든 패키지 명을 다 적어야 한다.
     JdbcTemplate의 `BeanPropertyRowMapper` 처럼 SELECT SQL의 결과를 편리하게 객체로 바로 변
     환해준다.
     `mybatis.configuration.map-underscore-to-camel-case=true` 속성을 지정한 덕분에 언
     더스코어를 카멜 표기법으로 자동으로 처리해준다. ( `item_name` `itemName` )-->

    <select id="findAll" resultType="Item">
        select id, item_name, price, quantity
        from item
        <where>
            <if test="itemName != null and itemName != ''">
                and item_name like concat('%',#{itemName},'%')
            </if>
            <if test="maxPrice != null">
                and price &lt;= #{maxPrice}
            </if>
        </where>
    </select>
<!--
    Mybatis는 `<where>` , `<if>` 같은 동적 쿼리 문법을 통해 편리한 동적 쿼리를 지원한다.
    `<if>` 는 해당 조건이 만족하면 구문을 추가한다.
    `<where>` 은 적절하게 `where` 문장을 만들어준다.
    예제에서 `<if>` 가 모두 실패하게 되면 SQL `where` 를 만들지 않는다.
    예제에서 `<if>` 가 하나라도 성공하면 처음 나타나는 `and` 를 `where` 로 변환해준다.
    -->
</mapper>